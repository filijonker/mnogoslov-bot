import os
import telebot
import sqlite3
import json
from flask import Flask, request
from telebot import types, TeleBot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from textwrap import dedent
import random

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
PORT = int(os.environ.get('PORT', 8080))
DB_NAME = 'bot_database.db'

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å FSM ---
state_storage = StateMemoryStorage()
bot = TeleBot(BOT_TOKEN, state_storage=state_storage, parse_mode='Markdown')
app = Flask(__name__)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS users (telegram_id INTEGER PRIMARY KEY, goal_chars INTEGER, current_progress INTEGER DEFAULT 0)')
    conn.commit()
    conn.close()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ ---
def get_time_string(weeks_needed):
    if weeks_needed is None or weeks_needed <= 0: return "–º–≥–Ω–æ–≤–µ–Ω–Ω–æ (–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"
    if weeks_needed > 52:
        years = round(weeks_needed / 52, 1)
        return f"–ø—Ä–∏–º–µ—Ä–Ω–æ {years} –≥." if years < 5 else f"–ø—Ä–∏–º–µ—Ä–Ω–æ {years} –ª–µ—Ç"
    elif weeks_needed > 4:
        months = round(weeks_needed / 4.34, 1)
        return f"–ø—Ä–∏–º–µ—Ä–Ω–æ {months} –º–µ—Å."
    else:
        weeks = round(weeks_needed)
        if weeks == 1: return "1 –Ω–µ–¥–µ–ª—è"
        return f"{weeks} –Ω–µ–¥–µ–ª–∏"

# --- –í–µ–±—Ö—É–∫ ---
@app.route('/', methods=['POST'])
def process_webhook():
    try:
        json_str = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return 'ok', 200
    except Exception as e:
        print(f"Webhook error: {e}")
        return 'error', 500

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
class DialogStates(StatesGroup):
    awaiting_goal = State()
    awaiting_days = State()
    awaiting_chars = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ---
@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    welcome_text = "*–Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ *–ú–Ω–æ–≥–æ—Å–ª–æ–≤*. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–Ω–∏–≥—É...\n\n...–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ–º, —Å–∫–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤ –±—É–¥–µ—Ç –≤ —Ç–≤–æ–µ–π –∫–Ω–∏–≥–µ?"
    bot.send_message(chat_id, dedent(welcome_text))
    bot.set_state(message.from_user.id, DialogStates.awaiting_goal, chat_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ ---
@bot.message_handler(state=DialogStates.awaiting_goal)
def goal_handler(message):
    try:
        goal = int(message.text)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['goal_chars'] = goal
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ê —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–∏—Å–∞—Ç—å?")
        bot.set_state(message.from_user.id, DialogStates.awaiting_days, message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(state=DialogStates.awaiting_days)
def days_handler(message):
    try:
        days = int(message.text)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['days_per_week'] = days
        bot.send_message(message.chat.id, "–ü–æ–Ω—è–ª. –ê —Å–∫–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤ –∑–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é?")
        bot.set_state(message.from_user.id, DialogStates.awaiting_chars, message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7).")

@bot.message_handler(state=DialogStates.awaiting_chars)
def chars_handler(message):
    chat_id = message.chat.id
    try:
        with bot.retrieve_data(message.from_user.id, chat_id) as data:
            goal = data['goal_chars']
            days = data['days_per_week']
        
        chars_per_session = int(message.text)
        chars_per_week = days * chars_per_session
        weeks_needed = goal / chars_per_week if chars_per_week > 0 else None
        time_str = get_time_string(weeks_needed)

        final_text = f"""*–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!*\n\n–¢–≤–æ—è —Ü–µ–ª—å: *{goal:,}* –∑–Ω–∞–∫–æ–≤.\n–¢—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–∏—Å–∞—Ç—å *{days}* —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ *{chars_per_session:,}* –∑–Ω–∞–∫–æ–≤.\n\n–ü—Ä–∏ —Ç–∞–∫–æ–º —Ç–µ–º–ø–µ, —Ç–µ–±–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è *{time_str}*.\n\n–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ—é —Ü–µ–ª—å. –£–¥–∞—á–∏!"""
        bot.send_message(chat_id, dedent(final_text))

        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO users (telegram_id, goal_chars, current_progress) VALUES (?, ?, 0)", (chat_id, goal))
        conn.commit()
        conn.close()

        bot.delete_state(message.from_user.id, chat_id)
    except (ValueError, KeyError):
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. /start")
        bot.delete_state(message.from_user.id, chat_id)

# --- –ö–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é ---
# state="*" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–µ—Ä–≤–∞–≤ –¥–∏–∞–ª–æ–≥
@bot.message_handler(state="*", commands=['stats'])
def stats_handler(message):
    bot.delete_state(message.from_user.id, message.chat.id)
    # ... (—Ç–≤–æ–π –∫–æ–¥ –¥–ª—è /stats)
    chat_id = message.chat.id
    try:
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        if result and result[1] is not None:
            progress, goal = result
            percentage = (progress / goal * 100) if goal > 0 else 0
            stats_text = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n*–ù–∞–ø–∏—Å–∞–Ω–æ:* {progress:,} / {goal:,} –∑–Ω–∞–∫–æ–≤\n*–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* {percentage:.1f}%"
            bot.send_message(chat_id, dedent(stats_text))
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å: /start")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(state="*", commands=['done'])
def done_handler(message):
    bot.delete_state(message.from_user.id, message.chat.id)
    # ... (—Ç–≤–æ–π –∫–æ–¥ –¥–ª—è /done)
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) < 2: raise ValueError()
        added_chars = int(args[1])
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET current_progress = current_progress + ? WHERE telegram_id = ?", (added_chars, chat_id))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ! {added_chars:,} –∑–Ω–∞–∫–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: /stats")
    except (ValueError, IndexError):
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `/done 1500`")

@bot.message_handler(state="*", commands=['inspiration', 'help'])
def inspiration_help_handler(message):
    bot.delete_state(message.from_user.id, message.chat.id)
    if message.text.startswith('/inspiration'):
         # ... (—Ç–≤–æ–π –∫–æ–¥ –¥–ª—è /inspiration)
        prompts = ["–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç...", "–û–ø–∏—à–∏ –∑–∞–∫–∞—Ç –≥–ª–∞–∑–∞–º–∏..."]
        bot.send_message(message.chat.id, f"‚ú® *–ò–¥–µ—è –¥–ª—è —Ç–µ–±—è:*\n\n_{random.choice(prompts)}_")
    elif message.text.startswith('/help'):
        # ... (—Ç–≤–æ–π –∫–æ–¥ –¥–ª—è /help)
        help_text = "*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–Ω–æ–≥–æ—Å–ª–æ–≤...*"
        bot.send_message(message.chat.id, dedent(help_text))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(state=None, func=lambda message: True)
def unknown_handler(message):
    bot.send_message(message.chat.id, "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ /–ú–µ–Ω—é.")


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    init_db()
    if 'RENDER' in os.environ:
        WEBHOOK_URL = os.environ.get('RENDER_EXTERNAL_URL')
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
        app.run(host='0.0.0.0', port=PORT)
    else:
        bot.remove_webhook()
        bot.polling(none_stop=True)
