import os
import telebot
import sqlite3
import json
from flask import Flask, request
from telebot import types, TeleBot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import random
from textwrap import dedent

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
PORT = int(os.environ.get('PORT', 8080))
DB_NAME = 'bot_database.db'
state_storage = StateMemoryStorage()
bot = TeleBot(BOT_TOKEN, state_storage=state_storage, parse_mode='Markdown')
app = Flask(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ DB ---
def get_time_string(weeks_needed):
    if weeks_needed is None or weeks_needed <= 0: return "–º–≥–Ω–æ–≤–µ–Ω–Ω–æ"
    if weeks_needed > 52:
        years = round(weeks_needed / 52, 1)
        return f"–ø—Ä–∏–º–µ—Ä–Ω–æ {years} –≥." if years < 2 else f"–ø—Ä–∏–º–µ—Ä–Ω–æ {years} –ª–µ—Ç"
    elif weeks_needed > 4:
        months = round(weeks_needed / 4.34, 1)
        return f"–ø—Ä–∏–º–µ—Ä–Ω–æ {months} –º–µ—Å."
    else:
        weeks = round(weeks_needed)
        if weeks == 1: return "1 –Ω–µ–¥–µ–ª—è"
        return f"{weeks} –Ω–µ–¥–µ–ª–∏" if 2 <= weeks <= 4 else f"{weeks} –Ω–µ–¥–µ–ª—å"

def init_db():
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS users (telegram_id INTEGER PRIMARY KEY, goal_chars INTEGER, current_progress INTEGER DEFAULT 0)')
    conn.commit()
    conn.close()

# --- –í–µ–±—Ö—É–∫ ---
@app.route('/', methods=['POST'])
def process_webhook():
    json_str = request.get_data().decode('utf-8')
    update = types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'ok', 200

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class DialogStates(StatesGroup):
    awaiting_goal = State()
    awaiting_days = State()
    awaiting_chars = State()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

@bot.message_handler(commands=['start'])
def start_command_handler(message):
    chat_id = message.chat.id
    bot.delete_state(message.from_user.id, chat_id)
    welcome_text = """*–Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ *–ú–Ω–æ–≥–æ—Å–ª–æ–≤*. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–Ω–∏–≥—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏. \n–ß—Ç–æ —è —É–º–µ—é:\n- –ü–æ–º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞–∫–æ–≤ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –µ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n- –ë—É–¥—É –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n- –ü–æ–¥–∫–∏–Ω—É –∏–¥–µ—é –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏—Ç —Å—Ç—É–ø–æ—Ä\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à –ø–∏—Å–∞—Ç–µ–ª—å—Å–∫–∏–π –º–∞—Ä–∞—Ñ–æ–Ω, –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ–∏–Ω–∏—à–Ω—É—é —á–µ—Ä—Ç—É ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å. –ï—Å–ª–∏  –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ ¬´–ì–∞—Ä—Ä–∏ –ü–æ—Ç–µ—Ä–µ –∏ —Ç–∞–π–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ¬ª 360 000 –∑–Ω–∞–∫–æ–≤.\n\n–ò—Ç–∞–∫, —Å–∫–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ä—É–∫–æ–ø–∏—Å—å?"""
    bot.send_message(chat_id, dedent(welcome_text))
    bot.set_state(message.from_user.id, DialogStates.awaiting_goal, chat_id)

@bot.message_handler(state=DialogStates.awaiting_goal)
def handle_goal(message):
    try:
        goal = int(message.text)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data: data['goal_chars'] = goal
        bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ê —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≤ —Å—Ä–µ–¥–Ω–µ–º —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–∏—Å–∞—Ç—å?")
        bot.set_state(message.from_user.id, DialogStates.awaiting_days, message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(state=DialogStates.awaiting_days)
def handle_days(message):
    try:
        days = int(message.text)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data: data['days_per_week'] = days
        bot.send_message(message.chat.id, "–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª. –ü—Ä–∏–º–µ—Ä–Ω–æ —Å–∫–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤ –∑–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é?")
        bot.set_state(message.from_user.id, DialogStates.awaiting_chars, message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

@bot.message_handler(state=DialogStates.awaiting_chars)
def handle_chars(message):
    chat_id = message.chat.id
    try:
        chars_per_session = int(message.text)
        with bot.retrieve_data(message.from_user.id, chat_id) as data:
            goal = data['goal_chars']
            days = data['days_per_week']
        chars_per_week = days * chars_per_session
        weeks_needed = goal / chars_per_week if chars_per_week > 0 else None
        time_str = get_time_string(weeks_needed)
        final_text = f"""*–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!*\n\n–¢–≤–æ—è —Ü–µ–ª—å: *{goal:,}* –∑–Ω–∞–∫–æ–≤.\n–¢—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–∏—Å–∞—Ç—å *{days}* —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ *{chars_per_session:,}* –∑–Ω–∞–∫–æ–≤.\n\n–ü—Ä–∏ —Ç–∞–∫–æ–º —Ç–µ–º–ø–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–Ω–∏–≥—É, —Ç–µ–±–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è *{time_str}*.\n\n–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ—é —Ü–µ–ª—å. –£–¥–∞—á–∏!"""
        bot.send_message(chat_id, dedent(final_text))
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO users (telegram_id, goal_chars, current_progress) VALUES (?, ?, 0)", (chat_id, goal))
        conn.commit()
        conn.close()
        bot.delete_state(message.from_user.id, chat_id)
    except Exception:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. /start")
        bot.delete_state(message.from_user.id, chat_id)

@bot.message_handler(state=None, commands=['stats'])
def stats_command_handler(message):
    chat_id = message.chat.id
    try:
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        if result and result[1] is not None:
            progress, goal = result
            percentage = (progress / goal * 100) if goal > 0 else 0
            stats_text = f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n*–ù–∞–ø–∏—Å–∞–Ω–æ:* {progress:,} / {goal:,} –∑–Ω–∞–∫–æ–≤ ({percentage:.1f}%)"
            bot.send_message(chat_id, dedent(stats_text))
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(state=None, commands=['done'])
def done_command_handler(message):
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) < 2: raise ValueError()
        added_chars = int(args[1])
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET current_progress = current_progress + ? WHERE telegram_id = ?", (added_chars, chat_id))
        if cursor.rowcount == 0:
            bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å. /start")
            conn.close()
            return
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        progress, goal = cursor.fetchone()
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚ú®\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:,} / {goal:,} –∑–Ω–∞–∫–æ–≤.")
    except (ValueError, IndexError):
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `/done 1500`")

@bot.message_handler(state=None, commands=['inspiration'])
def inspiration_command_handler(message):
    prompts = ["–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç...", "–û–ø–∏—à–∏ –∑–∞–∫–∞—Ç –≥–ª–∞–∑–∞–º–∏...", "–ù–∞—á–Ω–∏ –∏—Å—Ç–æ—Ä–∏—é —Å —Ñ—Ä–∞–∑—ã..."]
    bot.send_message(message.chat.id, f"‚ú® *–ò–¥–µ—è –¥–ª—è —Ç–µ–±—è:*\n\n_{random.choice(prompts)}_")

@bot.message_handler(state=None, commands=['help'])
def help_command_handler(message):
    help_text = """*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–Ω–æ–≥–æ—Å–ª–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:*\n\n/start ...\n/stats ...\n/done `[—á–∏—Å–ª–æ]` ...\n/inspiration ..."""
    bot.send_message(message.chat.id, dedent(help_text))

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    init_db()
    if 'RENDER' in os.environ:
        WEBHOOK_URL = os.environ.get('RENDER_EXTERNAL_URL')
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
        app.run(host='0.0.0.0', port=PORT)
    else:
        bot.remove_webhook()
        bot.polling(none_stop=True)
