import os
import telebot
import sqlite3
import json
from flask import Flask, request
from telebot import types
import random
from textwrap import dedent

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
PORT = int(os.environ.get('PORT', 8080))
DB_NAME = 'bot_database.db' 

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    cursor = conn.cursor()
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–µ–∑ –ø–æ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            goal_chars INTEGER,
            current_progress INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –í–µ–±—Ö—É–∫ ---
@app.route('/', methods=['POST'])
def process_webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'ok', 200

# --- –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
user_states = {} # –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞

@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    welcome_text = """
    *‚úçÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–ú–Ω–æ–≥–æ—Å–ª–æ–≤¬ª.*

    –Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Å–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å —Ä—É–∫–æ–ø–∏—Å–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ—Å—Ç–∞–≤–∏–º —Ü–µ–ª—å.
    
    –°–∫–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ä—É–∫–æ–ø–∏—Å—å?
    """
    bot.send_message(chat_id, dedent(welcome_text), parse_mode="Markdown")
    user_states[chat_id] = 'awaiting_goal'

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_goal')
def goal_handler(message):
    chat_id = message.chat.id
    try:
        goal = int(message.text)
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO users (telegram_id, goal_chars, current_progress) VALUES (?, ?, 0)", (chat_id, goal))
        conn.commit()
        conn.close()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è —Ü–µ–ª—å ‚Äî *{goal:,}* –∑–Ω–∞–∫–æ–≤. –ö–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—à—å —Å–∫–æ–ª—å–∫–æ-—Ç–æ –∑–Ω–∞–∫–æ–≤ –≤ —Ä—É–∫–æ–ø–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É`/done [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤]`. –ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è —Ç—É—Ç, —É–¥–∞—á–∏!", parse_mode="Markdown")
        user_states.pop(chat_id, None) 
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 360000).")

# --- –ö–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é ---

@bot.message_handler(commands=['stats'])
def stats_handler(message):
    chat_id = message.chat.id
    try:
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        if result and result[1] is not None:
            progress, goal = result
            percentage = (progress / goal * 100) if goal > 0 else 0
            remaining = goal - progress
            stats_text = f"""üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n*–¶–µ–ª—å:* {goal:,} –∑–Ω–∞–∫–æ–≤\n*–ù–∞–ø–∏—Å–∞–Ω–æ:* {progress:,} –∑–Ω–∞–∫–æ–≤\n*–û—Å—Ç–∞–ª–æ—Å—å:* {remaining:,} –∑–Ω–∞–∫–æ–≤\n*–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* {percentage:.1f}%"""
            bot.send_message(chat_id, dedent(stats_text), parse_mode="Markdown")
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['inspiration'])
def inspiration_handler(message):
    prompts = ["–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç. –ß—Ç–æ —ç—Ç–æ?", "–û–ø–∏—à–∏ –∑–∞–∫–∞—Ç –≥–ª–∞–∑–∞–º–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç –µ–≥–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑.", "–ù–∞—á–Ω–∏ –∏—Å—Ç–æ—Ä–∏—é —Å —Ñ—Ä–∞–∑—ã: '–≠—Ç–æ –±—ã–ª–∞ –ø–ª–æ—Ö–∞—è –∏–¥–µ—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞...'"]
    prompt = random.choice(prompts)
    bot.send_message(message.chat.id, f"‚ú® *–ò–¥–µ—è –¥–ª—è —Ç–µ–±—è:*\n\n_{prompt}_", parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def help_handler(message):
    help_text = """*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–Ω–æ–≥–æ—Å–ª–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:*\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å.\n/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å.\n/done `[—á–∏—Å–ª–æ]` - –ó–∞–ø–∏—Å–∞—Ç—å `—á–∏—Å–ª–æ` –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/done 2000`).\n/inspiration - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –∏–ª–∏ —Ü–∏—Ç–∞—Ç—É –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è."""
    bot.send_message(chat_id, dedent(help_text), parse_mode="Markdown")

@bot.message_handler(commands=['done'])
def done_handler(message):
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) < 2: raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤.")
        added_chars = int(args[1])
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        if cursor.fetchone() is None:
            bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            conn.close()
            return
        cursor.execute("UPDATE users SET current_progress = current_progress + ? WHERE telegram_id = ?", (added_chars, chat_id))
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        progress, goal = cursor.fetchone()
        conn.commit()
        conn.close()
        percentage = (progress / goal * 100) if goal > 0 else 0
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚ú®\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:,} / {goal:,} –∑–Ω–∞–∫–æ–≤ ({percentage:.1f}%).")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `/done 1500`")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    if 'RENDER' in os.environ:
        print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞...")
        WEBHOOK_URL = os.environ.get('RENDER_EXTERNAL_URL')
        if WEBHOOK_URL:
            bot.remove_webhook()
            bot.set_webhook(url=WEBHOOK_URL)
            print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
        app.run(host='0.0.0.0', port=PORT)
    else:
        print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        bot.remove_webhook()
        bot.polling(none_stop=True)
