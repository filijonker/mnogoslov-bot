import os
import telebot
import sqlite3
import json
from flask import Flask, request
from telebot import types
import datetime
import random
from textwrap import dedent # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
PORT = int(os.environ.get('PORT', 8080))
DB_NAME = 'bot_database.db' # –ò–º—è —Ñ–∞–π–ª–∞ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            goal_chars INTEGER,
            current_progress INTEGER DEFAULT 0,
            schedule_days TEXT,
            schedule_time TEXT,
            reminders_on INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –í–µ–±—Ö—É–∫ ---
@app.route('/', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'ok', 200
# --- –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
user_states = {}

@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    # –¢–≤–æ–π –æ—Ç–ª–∏—á–Ω—ã–π –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç!
    welcome_text = """
    *‚úçÔ∏è –ü—Ä–∏–≤–µ—Ç, —è –ú–Ω–æ–≥–æ—Å–ª–æ–≤. –ú–æ—è –∑–∞–¥–∞—á–∞: –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–Ω–∏–≥—É. –ß—Ç–æ —è —É–º–µ—é:*\n
    - –ü–æ–º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞–∫–æ–≤ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –µ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    - –ë—É–¥—É –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    - –ü–æ–¥–∫–∏–Ω—É –∏–¥–µ—é –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏—Ç —Å—Ç—É–ø–æ—Ä

    –ù–∞—á–Ω—ë–º?
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å"
    markup = types.InlineKeyboardMarkup()
    button_begin = types.InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å üéØ", callback_data="begin_setup")
    markup.add(button_begin)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π.
    # –ú—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ —Ç—ã —ç—Ç–æ–≥–æ –Ω–µ —Ö–æ—Ç–µ–ª–∞.
    bot.send_message(chat_id, dedent(welcome_text), reply_markup=markup, parse_mode="Markdown")
    
    # –í–ê–ñ–ù–û: –ú—ã –ù–ï –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å. –ú—ã –∂–¥–µ–º, –ø–æ–∫–∞ –æ–Ω –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å"
@bot.callback_query_handler(func=lambda call: call.data == 'begin_setup')
def begin_setup_callback(call):
    chat_id = call.message.chat.id
    
    # –ú–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤–µ–µ
    bot.edit_message_text(
        chat_id=chat_id, 
        message_id=call.message.message_id, 
        text="–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º."
    )
    
    # –ê —É–∂–µ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–Ω–∞–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–≤–æ–µ–π –∫–Ω–∏–≥–µ? (–ù–∞–ø—Ä–∏–º–µ—Ä: 360000)")
    
    # –ò —Ç–æ–ª—å–∫–æ –¢–ï–ü–ï–†–¨ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
    user_states[chat_id] = 'awaiting_goal'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–ª–∏ (—ç—Ç–æ—Ç –∫–æ–¥ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å, –æ–Ω –∏–¥–µ—Ç –ø–æ—Å–ª–µ)
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_goal')
def goal_handler(message):
    # ... —Ç–≤–æ–π –∫–æ–¥ goal_handler –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# --- –ù–û–í–´–ô –ë–õ–û–ö –ö–û–ú–ê–ù–î –ò–ó –ú–ï–ù–Æ ---
@bot.message_handler(commands=['stats'])
def stats_handler(message):
    chat_id = message.chat.id
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        result = cursor.fetchone()
        conn.close()

        if result and result[1] is not None:
            progress, goal = result
            percentage = (progress / goal * 100) if goal > 0 else 0
            remaining = goal - progress
            
            stats_text = f"""
            üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n
            *–¶–µ–ª—å:* {goal} –∑–Ω–∞–∫–æ–≤
            *–ù–∞–ø–∏—Å–∞–Ω–æ:* {progress} –∑–Ω–∞–∫–æ–≤
            *–û—Å—Ç–∞–ª–æ—Å—å:* {remaining} –∑–Ω–∞–∫–æ–≤
            *–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* {percentage:.1f}%
            """
            bot.send_message(chat_id, dedent(stats_text), parse_mode="Markdown")
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(commands=['inspiration'])
def inspiration_handler(message):
    prompts = [
        "–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç. –ß—Ç–æ —ç—Ç–æ?",
        "–û–ø–∏—à–∏ –∑–∞–∫–∞—Ç –≥–ª–∞–∑–∞–º–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç –µ–≥–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑.",
        "–ù–∞—á–Ω–∏ –∏—Å—Ç–æ—Ä–∏—é —Å —Ñ—Ä–∞–∑—ã: '–≠—Ç–æ –±—ã–ª–∞ –ø–ª–æ—Ö–∞—è –∏–¥–µ—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞...'",
        "–î–≤–∞ –≤—Ä–∞–≥–∞ –∑–∞–ø–µ—Ä—Ç—ã –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –£ –Ω–∏—Ö –µ—Å—Ç—å —á–∞—Å, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è.",
        "–¶–∏—Ç–∞—Ç–∞: '–ù–∞—á–∏–Ω–∞–π –ø–∏—Å–∞—Ç—å, –Ω–µ–≤–∞–∂–Ω–æ –æ —á–µ–º. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥–≤–∏–≥–∞—Ç—å —Ä—É—á–∫–æ–π.' ‚Äî –†—ç–π –ë—Ä—ç–¥–±–µ—Ä–∏",
        "–¶–∏—Ç–∞—Ç–∞: '–°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞ ‚Äî –Ω–∞—á–∞—Ç—å.' ‚Äî –ú–∞—Ä–∫ –¢–≤–µ–Ω"
    ]
    prompt = random.choice(prompts)
    bot.send_message(message.chat.id, f"‚ú® *–ò–¥–µ—è –¥–ª—è —Ç–µ–±—è:*\n\n_{prompt}_", parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def help_handler(message):
    help_text = """
    *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–Ω–æ–≥–æ—Å–ª–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:*\n
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å.
    /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å.
    /done `[—á–∏—Å–ª–æ]` - –ó–∞–ø–∏—Å–∞—Ç—å `—á–∏—Å–ª–æ` –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/done 2000`).
    /inspiration - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –∏–ª–∏ —Ü–∏—Ç–∞—Ç—É –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    bot.send_message(message.chat.id, dedent(help_text), parse_mode="Markdown")

# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'awaiting_goal')
def goal_handler(message):
    chat_id = message.chat.id
    try:
        goal = int(message.text)
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO users (telegram_id, goal_chars, current_progress) VALUES (?, ?, 0)", (chat_id, goal))
        conn.commit()
        conn.close()
        
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è —Ü–µ–ª—å ‚Äî *{goal}* –∑–Ω–∞–∫–æ–≤. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π `/done [—á–∏—Å–ª–æ]`. –£–¥–∞—á–∏!", parse_mode="Markdown")
        user_states.pop(chat_id, None) # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 360000).")

@bot.message_handler(commands=['done'])
def done_handler(message):
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) < 2:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤.")
            
        added_chars = int(args[1])
        
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET current_progress = current_progress + ? WHERE telegram_id = ?", (added_chars, chat_id))

        if cursor.rowcount == 0:
            bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            conn.close()
            return
            
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        progress, goal = cursor.fetchone()
        conn.commit()
        conn.close()

        percentage = (progress / goal * 100) if goal > 0 else 0
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚ú®\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress} / {goal} –∑–Ω–∞–∫–æ–≤ ({percentage:.1f}%).")
        
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `/done 1500`")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    
    WEBHOOK_URL = os.environ.get('RENDER_EXTERNAL_URL')
    if WEBHOOK_URL:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    
    app.run(host='0.0.0.0', port=PORT)

