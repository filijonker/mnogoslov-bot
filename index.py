import os
import telebot
import sqlite3
import json
from flask import Flask, request
from telebot import types
import random
from textwrap import dedent

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
PORT = int(os.environ.get('PORT', 8080))
DB_NAME = 'bot_database.db' # –ò–º—è —Ñ–∞–π–ª–∞ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            state TEXT,
            goal_chars INTEGER,
            current_progress INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –í–µ–±—Ö—É–∫ ---
@app.route('/', methods=['POST'])
def process_webhook():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ Telebot."""
    try:
        json_str = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_str)
        # –í–ê–ñ–ù–û: telebot –æ–∂–∏–¥–∞–µ—Ç –°–ü–ò–°–û–ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
        # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
        bot.process_new_updates([update])
        return 'ok', 200
    except Exception as e:
        print(f"Webhook processing error: {e}")
        return 'error', 500

# --- –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---

# –ú—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å user_states.
# –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä—è–º–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
def get_user_state(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT state FROM users WHERE telegram_id = ?", (chat_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def set_user_state(chat_id, state):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    cursor = conn.cursor()
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–∏—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ,
    # –∞ –ø–æ—Ç–æ–º UPDATE, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id) VALUES (?)", (chat_id,))
    cursor.execute("UPDATE users SET state = ? WHERE telegram_id = ?", (state, chat_id))
    conn.commit()
    conn.close()

@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    welcome_text = """
    *‚úçÔ∏è –ü—Ä–∏–≤–µ—Ç, —è –ú–Ω–æ–≥–æ—Å–ª–æ–≤. –ú–æ—è –∑–∞–¥–∞—á–∞: –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–Ω–∏–≥—É. –ß—Ç–æ —è —É–º–µ—é:*\n
    - –ü–æ–º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞–∫–æ–≤.
    - –ë—É–¥—É –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    - –ü–æ–¥–∫–∏–Ω—É –∏–¥–µ—é –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏—Ç —Å—Ç—É–ø–æ—Ä.

    –ù–∞—á–Ω—ë–º?
    """
    
    markup = types.InlineKeyboardMarkup()
    button_begin = types.InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å üéØ", callback_data="begin_setup")
    markup.add(button_begin)
    
    bot.send_message(chat_id, dedent(welcome_text), reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == 'begin_setup')
def begin_setup_callback(call):
    chat_id = call.message.chat.id
    bot.edit_message_text(
        chat_id=chat_id, 
        message_id=call.message.message_id, 
        text="–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º.",
        reply_markup=None
    )
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–Ω–∞–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–≤–æ–µ–π –∫–Ω–∏–≥–µ? (–ù–∞–ø—Ä–∏–º–µ—Ä: 360000)")
    set_user_state(chat_id, 'awaiting_goal')

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'awaiting_goal')
def goal_handler(message):
    chat_id = message.chat.id
    try:
        goal = int(message.text)
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET goal_chars = ?, current_progress = 0, state = NULL WHERE telegram_id = ?", (goal, chat_id))
        conn.commit()
        conn.close()
        
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è —Ü–µ–ª—å ‚Äî *{goal:,}* –∑–Ω–∞–∫–æ–≤. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π `/done [—á–∏—Å–ª–æ]`. –£–¥–∞—á–∏!", parse_mode="Markdown")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 360000).")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏: {e}")

@bot.message_handler(commands=['stats'])
def stats_handler(message):
    chat_id = message.chat.id
    try:
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        result = cursor.fetchone()
        conn.close()

        if result and result[1] is not None:
            progress, goal = result
            percentage = (progress / goal * 100) if goal > 0 else 0
            remaining = goal - progress
            
            stats_text = f"""
            üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n
            *–¶–µ–ª—å:* {goal:,} –∑–Ω–∞–∫–æ–≤
            *–ù–∞–ø–∏—Å–∞–Ω–æ:* {progress:,} –∑–Ω–∞–∫–æ–≤
            *–û—Å—Ç–∞–ª–æ—Å—å:* {remaining:,} –∑–Ω–∞–∫–æ–≤
            *–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* {percentage:.1f}%
            """
            bot.send_message(chat_id, dedent(stats_text), parse_mode="Markdown")
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(commands=['inspiration'])
def inspiration_handler(message):
    prompts = [
        "–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç. –ß—Ç–æ —ç—Ç–æ?",
        "–û–ø–∏—à–∏ –∑–∞–∫–∞—Ç –≥–ª–∞–∑–∞–º–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–∏—Ç –µ–≥–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑.",
        "–ù–∞—á–Ω–∏ –∏—Å—Ç–æ—Ä–∏—é —Å —Ñ—Ä–∞–∑—ã: '–≠—Ç–æ –±—ã–ª–∞ –ø–ª–æ—Ö–∞—è –∏–¥–µ—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞...'",
        "–î–≤–∞ –≤—Ä–∞–≥–∞ –∑–∞–ø–µ—Ä—Ç—ã –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –£ –Ω–∏—Ö –µ—Å—Ç—å —á–∞—Å, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è.",
        "–¶–∏—Ç–∞—Ç–∞: '–ù–∞—á–∏–Ω–∞–π –ø–∏—Å–∞—Ç—å, –Ω–µ–≤–∞–∂–Ω–æ –æ —á–µ–º. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥–≤–∏–≥–∞—Ç—å —Ä—É—á–∫–æ–π.' ‚Äî –†—ç–π –ë—Ä—ç–¥–±–µ—Ä–∏",
        "–¶–∏—Ç–∞—Ç–∞: '–°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞ ‚Äî –Ω–∞—á–∞—Ç—å.' ‚Äî –ú–∞—Ä–∫ –¢–≤–µ–Ω"
    ]
    prompt = random.choice(prompts)
    bot.send_message(message.chat.id, f"‚ú® *–ò–¥–µ—è –¥–ª—è —Ç–µ–±—è:*\n\n_{prompt}_", parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def help_handler(message):
    help_text = """
    *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–Ω–æ–≥–æ—Å–ª–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:*\n
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å.
    /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å.
    /done `[—á–∏—Å–ª–æ]` - –ó–∞–ø–∏—Å–∞—Ç—å `—á–∏—Å–ª–æ` –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/done 2000`).
    /inspiration - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –∏–ª–∏ —Ü–∏—Ç–∞—Ç—É –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è.
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    bot.send_message(chat_id, dedent(help_text), parse_mode="Markdown")

@bot.message_handler(commands=['done'])
def done_handler(message):
    chat_id = message.chat.id
    try:
        args = message.text.split()
        if len(args) < 2:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤.")
            
        added_chars = int(args[1])
        
        conn = sqlite3.connect(DB_NAME, check_same_thread=False)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª—å
        cursor.execute("SELECT goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        if cursor.fetchone() is None:
            bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            conn.close()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        cursor.execute("UPDATE users SET current_progress = current_progress + ? WHERE telegram_id = ?", (added_chars, chat_id))
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ü–µ–ª—å
        cursor.execute("SELECT current_progress, goal_chars FROM users WHERE telegram_id = ?", (chat_id,))
        progress, goal = cursor.fetchone()
        conn.commit()
        conn.close()

        percentage = (progress / goal * 100) if goal > 0 else 0
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚ú®\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:,} / {goal:,} –∑–Ω–∞–∫–æ–≤ ({percentage:.1f}%).")
        
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: `/done 1500`")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞ Render
    if 'RENDER' in os.environ:
        print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞...")
        WEBHOOK_URL = os.environ.get('RENDER_EXTERNAL_URL')
        if WEBHOOK_URL:
            bot.remove_webhook()
            bot.set_webhook(url=WEBHOOK_URL)
            print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask
        app.run(host='0.0.0.0', port=PORT)
    else:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Ç–≤–æ–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)...")
        bot.remove_webhook()
        bot.polling(none_stop=True)
